// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	registry "github.com/istio-ecosystem/admiral/admiral/pkg/registry"
)

// MockConfigSyncer is an autogenerated mock type for the ConfigSyncer type
type MockConfigSyncer struct {
	mock.Mock
}

type MockConfigSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigSyncer) EXPECT() *MockConfigSyncer_Expecter {
	return &MockConfigSyncer_Expecter{mock: &_m.Mock}
}

// UpdateEnvironmentConfigByCluster provides a mock function with given fields: ctxLogger, environment, cluster, config, writer
func (_m *MockConfigSyncer) UpdateEnvironmentConfigByCluster(ctxLogger *logrus.Entry, environment string, cluster string, config registry.IdentityConfig, writer registry.ConfigWriter) error {
	ret := _m.Called(ctxLogger, environment, cluster, config, writer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentConfigByCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, string, string, registry.IdentityConfig, registry.ConfigWriter) error); ok {
		r0 = rf(ctxLogger, environment, cluster, config, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEnvironmentConfigByCluster'
type MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call struct {
	*mock.Call
}

// UpdateEnvironmentConfigByCluster is a helper method to define mock.On call
//   - ctxLogger *logrus.Entry
//   - environment string
//   - cluster string
//   - config registry.IdentityConfig
//   - writer registry.ConfigWriter
func (_e *MockConfigSyncer_Expecter) UpdateEnvironmentConfigByCluster(ctxLogger interface{}, environment interface{}, cluster interface{}, config interface{}, writer interface{}) *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call {
	return &MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call{Call: _e.mock.On("UpdateEnvironmentConfigByCluster", ctxLogger, environment, cluster, config, writer)}
}

func (_c *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call) Run(run func(ctxLogger *logrus.Entry, environment string, cluster string, config registry.IdentityConfig, writer registry.ConfigWriter)) *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*logrus.Entry), args[1].(string), args[2].(string), args[3].(registry.IdentityConfig), args[4].(registry.ConfigWriter))
	})
	return _c
}

func (_c *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call) Return(_a0 error) *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call) RunAndReturn(run func(*logrus.Entry, string, string, registry.IdentityConfig, registry.ConfigWriter) error) *MockConfigSyncer_UpdateEnvironmentConfigByCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigSyncer creates a new instance of MockConfigSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigSyncer {
	mock := &MockConfigSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
