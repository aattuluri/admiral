// Code generated by protoc-gen-go. DO NOT EDIT.
// source: globalrouting.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TrafficPolicy_LbType int32

const (
	//Traffic with be routed to local locality first
	//if there are no health instances in the local locality traffic will be routed to
	//remote locality
	TrafficPolicy_TOPOLOGY TrafficPolicy_LbType = 0
	TrafficPolicy_FAILOVER TrafficPolicy_LbType = 1
)

var TrafficPolicy_LbType_name = map[int32]string{
	0: "TOPOLOGY",
	1: "FAILOVER",
}

var TrafficPolicy_LbType_value = map[string]int32{
	"TOPOLOGY": 0,
	"FAILOVER": 1,
}

func (x TrafficPolicy_LbType) String() string {
	return proto.EnumName(TrafficPolicy_LbType_name, int32(x))
}

func (TrafficPolicy_LbType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a5c0dc509add6f4f, []int{1, 0}
}

type GlobalTrafficPolicy struct {
	// REQUIRED: A list host name .
	Policy []*TrafficPolicy `protobuf:"bytes,1,rep,name=policy,proto3" json:"policy,omitempty"`
	// REQUIRED: One or more labels that indicate a specific set of pods/VMs
	// on which this global routing policy should be applied. The scope of
	// label search is restricted to namespace mark for mesh enablement
	// this will scan all cluster and namespace
	Selector             map[string]string `protobuf:"bytes,2,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GlobalTrafficPolicy) Reset()         { *m = GlobalTrafficPolicy{} }
func (m *GlobalTrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*GlobalTrafficPolicy) ProtoMessage()    {}
func (*GlobalTrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c0dc509add6f4f, []int{0}
}

func (m *GlobalTrafficPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalTrafficPolicy.Unmarshal(m, b)
}
func (m *GlobalTrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalTrafficPolicy.Marshal(b, m, deterministic)
}
func (m *GlobalTrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalTrafficPolicy.Merge(m, src)
}
func (m *GlobalTrafficPolicy) XXX_Size() int {
	return xxx_messageInfo_GlobalTrafficPolicy.Size(m)
}
func (m *GlobalTrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalTrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalTrafficPolicy proto.InternalMessageInfo

func (m *GlobalTrafficPolicy) GetPolicy() []*TrafficPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *GlobalTrafficPolicy) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

// TrafficPolicy describes routing for a hostname.
type TrafficPolicy struct {
	// REQUIRED: dns that can be used by client.  This name will have the
	// traffic type applied to it
	Dns string `protobuf:"bytes,1,opt,name=dns,proto3" json:"dns,omitempty"` // Deprecated: Do not use.
	// REQUIRED: type of global load distrubtion
	LbType TrafficPolicy_LbType `protobuf:"varint,2,opt,name=lbType,proto3,enum=admiral.global.v1alpha.TrafficPolicy_LbType" json:"lbType,omitempty"`
	//weigth of primary and secondary must each 100
	Target []*TrafficGroup `protobuf:"bytes,3,rep,name=target,proto3" json:"target,omitempty"`
	//REQUIRED: dnsPrefix that will be prefixed for the service names being generated with this traffic policy
	//Ex: dnsPrefix = west => generated service name = west.stage.servicename.global
	DnsPrefix            string   `protobuf:"bytes,4,opt,name=dnsPrefix,proto3" json:"dnsPrefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficPolicy) Reset()         { *m = TrafficPolicy{} }
func (m *TrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficPolicy) ProtoMessage()    {}
func (*TrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c0dc509add6f4f, []int{1}
}

func (m *TrafficPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficPolicy.Unmarshal(m, b)
}
func (m *TrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficPolicy.Marshal(b, m, deterministic)
}
func (m *TrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficPolicy.Merge(m, src)
}
func (m *TrafficPolicy) XXX_Size() int {
	return xxx_messageInfo_TrafficPolicy.Size(m)
}
func (m *TrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficPolicy proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *TrafficPolicy) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *TrafficPolicy) GetLbType() TrafficPolicy_LbType {
	if m != nil {
		return m.LbType
	}
	return TrafficPolicy_TOPOLOGY
}

func (m *TrafficPolicy) GetTarget() []*TrafficGroup {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TrafficPolicy) GetDnsPrefix() string {
	if m != nil {
		return m.DnsPrefix
	}
	return ""
}

type TrafficGroup struct {
	//region for the traffic
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	//weight for traffic this region should get.
	Weight               int32    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficGroup) Reset()         { *m = TrafficGroup{} }
func (m *TrafficGroup) String() string { return proto.CompactTextString(m) }
func (*TrafficGroup) ProtoMessage()    {}
func (*TrafficGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c0dc509add6f4f, []int{2}
}

func (m *TrafficGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficGroup.Unmarshal(m, b)
}
func (m *TrafficGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficGroup.Marshal(b, m, deterministic)
}
func (m *TrafficGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficGroup.Merge(m, src)
}
func (m *TrafficGroup) XXX_Size() int {
	return xxx_messageInfo_TrafficGroup.Size(m)
}
func (m *TrafficGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficGroup proto.InternalMessageInfo

func (m *TrafficGroup) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *TrafficGroup) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterEnum("admiral.global.v1alpha.TrafficPolicy_LbType", TrafficPolicy_LbType_name, TrafficPolicy_LbType_value)
	proto.RegisterType((*GlobalTrafficPolicy)(nil), "admiral.global.v1alpha.GlobalTrafficPolicy")
	proto.RegisterMapType((map[string]string)(nil), "admiral.global.v1alpha.GlobalTrafficPolicy.SelectorEntry")
	proto.RegisterType((*TrafficPolicy)(nil), "admiral.global.v1alpha.TrafficPolicy")
	proto.RegisterType((*TrafficGroup)(nil), "admiral.global.v1alpha.TrafficGroup")
}

func init() { proto.RegisterFile("globalrouting.proto", fileDescriptor_a5c0dc509add6f4f) }

var fileDescriptor_a5c0dc509add6f4f = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xeb, 0x40,
	0x14, 0xc5, 0x5f, 0x92, 0xd7, 0xbc, 0xf6, 0xbe, 0x56, 0xca, 0xb4, 0x94, 0x20, 0x2e, 0x24, 0x54,
	0xe8, 0x42, 0x02, 0xd6, 0x8d, 0xff, 0xc1, 0x62, 0x2d, 0x42, 0x21, 0x65, 0xac, 0x82, 0xee, 0xa6,
	0xcd, 0x34, 0x1d, 0x9c, 0x66, 0xc2, 0x74, 0x5a, 0xed, 0x37, 0x76, 0xe3, 0x77, 0x90, 0x4c, 0x06,
	0xb5, 0x50, 0xd1, 0xdd, 0x3d, 0xe7, 0x72, 0x7e, 0x37, 0x27, 0x0c, 0xd4, 0x62, 0x2e, 0x46, 0x84,
	0x4b, 0xb1, 0x50, 0x2c, 0x89, 0x83, 0x54, 0x0a, 0x25, 0x50, 0x83, 0x44, 0x33, 0x26, 0x09, 0x0f,
	0xf2, 0x65, 0xb0, 0x3c, 0x20, 0x3c, 0x9d, 0x12, 0xff, 0xd5, 0x82, 0x5a, 0x4f, 0x5b, 0x43, 0x49,
	0x26, 0x13, 0x36, 0x1e, 0x08, 0xce, 0xc6, 0x2b, 0x74, 0x0e, 0x6e, 0xaa, 0x27, 0xcf, 0xda, 0x75,
	0x5a, 0xff, 0xdb, 0x7b, 0xc1, 0x66, 0x40, 0xb0, 0x16, 0xc3, 0x26, 0x84, 0xee, 0xa0, 0x38, 0xa7,
	0x9c, 0x8e, 0x95, 0x90, 0x9e, 0xad, 0x01, 0xc7, 0xdf, 0x01, 0x36, 0x5c, 0x0f, 0x6e, 0x4d, 0xb6,
	0x9b, 0x28, 0xb9, 0xc2, 0x1f, 0xa8, 0xed, 0x53, 0xa8, 0xac, 0xad, 0x50, 0x15, 0x9c, 0x27, 0x9a,
	0x7d, 0xa3, 0xd5, 0x2a, 0xe1, 0x6c, 0x44, 0x75, 0x28, 0x2c, 0x09, 0x5f, 0x50, 0xcf, 0xd6, 0x5e,
	0x2e, 0x4e, 0xec, 0x23, 0xcb, 0x7f, 0xb3, 0xa0, 0xb2, 0x5e, 0xb2, 0x0e, 0x4e, 0x94, 0xcc, 0xf3,
	0x74, 0xc7, 0xf6, 0x2c, 0x9c, 0x49, 0x74, 0x05, 0x2e, 0x1f, 0x0d, 0x57, 0x69, 0x8e, 0xd8, 0x6a,
	0xef, 0xff, 0xaa, 0x7a, 0xd0, 0xd7, 0x19, 0x6c, 0xb2, 0xe8, 0x0c, 0x5c, 0x45, 0x64, 0x4c, 0x95,
	0xe7, 0xe8, 0xfe, 0xcd, 0x1f, 0x28, 0x3d, 0x29, 0x16, 0x29, 0x36, 0x19, 0xb4, 0x03, 0xa5, 0x28,
	0x99, 0x0f, 0x24, 0x9d, 0xb0, 0x17, 0xef, 0xaf, 0x6e, 0xf2, 0x69, 0xf8, 0x4d, 0x70, 0xf3, 0x6b,
	0xa8, 0x0c, 0xc5, 0x61, 0x38, 0x08, 0xfb, 0x61, 0xef, 0xa1, 0xfa, 0x27, 0x53, 0xd7, 0x97, 0x37,
	0xfd, 0xf0, 0xbe, 0x8b, 0xab, 0x96, 0x7f, 0x01, 0xe5, 0xaf, 0x6c, 0xd4, 0x00, 0x57, 0xd2, 0x98,
	0x89, 0xc4, 0xfc, 0x2e, 0xa3, 0x32, 0xff, 0x99, 0xb2, 0x78, 0xaa, 0x74, 0xdf, 0x02, 0x36, 0xaa,
	0xf3, 0xef, 0xb1, 0x30, 0x13, 0x11, 0xe5, 0x23, 0x57, 0x3f, 0xa1, 0xc3, 0xf7, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x22, 0x4e, 0xd6, 0x22, 0x59, 0x02, 0x00, 0x00,
}
