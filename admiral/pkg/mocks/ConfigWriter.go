// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	clusters "github.com/istio-ecosystem/admiral/admiral/pkg/clusters"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	v1alpha3 "istio.io/api/networking/v1alpha3"
)

// ConfigWriter is an autogenerated mock type for the ConfigWriter type
type ConfigWriter struct {
	mock.Mock
}

// AddServiceEntriesWithDrToAllCluster provides a mock function with given fields: ctxLogger, ctx, rr, sourceClusters, serviceEntries, isAdditionalEndpointsEnabled, isServiceEntryModifyCalledForSourceCluster, identityId, env
func (_m *ConfigWriter) AddServiceEntriesWithDrToAllCluster(ctxLogger *logrus.Entry, ctx context.Context, rr *clusters.RemoteRegistry, sourceClusters map[string]string, serviceEntries map[string]*v1alpha3.ServiceEntry, isAdditionalEndpointsEnabled bool, isServiceEntryModifyCalledForSourceCluster bool, identityId string, env string) error {
	ret := _m.Called(ctxLogger, ctx, rr, sourceClusters, serviceEntries, isAdditionalEndpointsEnabled, isServiceEntryModifyCalledForSourceCluster, identityId, env)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceEntriesWithDrToAllCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, context.Context, *clusters.RemoteRegistry, map[string]string, map[string]*v1alpha3.ServiceEntry, bool, bool, string, string) error); ok {
		r0 = rf(ctxLogger, ctx, rr, sourceClusters, serviceEntries, isAdditionalEndpointsEnabled, isServiceEntryModifyCalledForSourceCluster, identityId, env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigWriter creates a new instance of ConfigWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigWriter {
	mock := &ConfigWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
