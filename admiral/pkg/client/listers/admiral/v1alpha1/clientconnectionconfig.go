/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/istio-ecosystem/admiral/admiral/pkg/apis/admiral/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClientConnectionConfigLister helps list ClientConnectionConfigs.
// All objects returned here must be treated as read-only.
type ClientConnectionConfigLister interface {
	// List lists all ClientConnectionConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientConnectionConfig, err error)
	// ClientConnectionConfigs returns an object that can list and get ClientConnectionConfigs.
	ClientConnectionConfigs(namespace string) ClientConnectionConfigNamespaceLister
	ClientConnectionConfigListerExpansion
}

// clientConnectionConfigLister implements the ClientConnectionConfigLister interface.
type clientConnectionConfigLister struct {
	indexer cache.Indexer
}

// NewClientConnectionConfigLister returns a new ClientConnectionConfigLister.
func NewClientConnectionConfigLister(indexer cache.Indexer) ClientConnectionConfigLister {
	return &clientConnectionConfigLister{indexer: indexer}
}

// List lists all ClientConnectionConfigs in the indexer.
func (s *clientConnectionConfigLister) List(selector labels.Selector) (ret []*v1alpha1.ClientConnectionConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientConnectionConfig))
	})
	return ret, err
}

// ClientConnectionConfigs returns an object that can list and get ClientConnectionConfigs.
func (s *clientConnectionConfigLister) ClientConnectionConfigs(namespace string) ClientConnectionConfigNamespaceLister {
	return clientConnectionConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClientConnectionConfigNamespaceLister helps list and get ClientConnectionConfigs.
// All objects returned here must be treated as read-only.
type ClientConnectionConfigNamespaceLister interface {
	// List lists all ClientConnectionConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClientConnectionConfig, err error)
	// Get retrieves the ClientConnectionConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClientConnectionConfig, error)
	ClientConnectionConfigNamespaceListerExpansion
}

// clientConnectionConfigNamespaceLister implements the ClientConnectionConfigNamespaceLister
// interface.
type clientConnectionConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClientConnectionConfigs in the indexer for a given namespace.
func (s clientConnectionConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClientConnectionConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientConnectionConfig))
	})
	return ret, err
}

// Get retrieves the ClientConnectionConfig from the indexer for a given namespace and name.
func (s clientConnectionConfigNamespaceLister) Get(name string) (*v1alpha1.ClientConnectionConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clientconnectionconfig"), name)
	}
	return obj.(*v1alpha1.ClientConnectionConfig), nil
}
